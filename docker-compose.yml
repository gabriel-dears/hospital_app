services:
  # =====================
  # API Gateway (Kong)
  # =====================
  kong:
    image: kong:3.4
    container_name: hospital-app-kong
    restart: unless-stopped
    depends_on:
      - user-service
      - appointment-service
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: ${KONG_DECLARATIVE_CONFIG}
      KONG_PROXY_ACCESS_LOG: ${KONG_PROXY_ACCESS_LOG}
      KONG_ADMIN_ACCESS_LOG: ${KONG_ADMIN_ACCESS_LOG}
      KONG_PROXY_ERROR_LOG: ${KONG_PROXY_ERROR_LOG}
      KONG_ADMIN_ERROR_LOG: ${KONG_ADMIN_ERROR_LOG}
      KONG_PROXY_LISTEN: ${KONG_PROXY_LISTEN}
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN}
    volumes:
      - ./kong/kong.yml:/etc/kong/kong.yml:ro
    ports:
      - "${KONG_PROXY_HTTP_PORT}:8000"
      - "${KONG_PROXY_HTTPS_PORT}:8443"
      - "${KONG_ADMIN_HTTP_PORT}:8001"
      - "${KONG_ADMIN_HTTPS_PORT}:8444"

  # =====================
  # User Service
  # =====================
  user-service:
    build:
      context: ./
      dockerfile: user_service/Dockerfile
    container_name: hospital-app-user-service
    depends_on:
      user-service-db:
        condition: service_healthy
    ports:
      - "8081:8080"
      - "5005:5005"
      - "9090:9090"
    environment:
      ENABLE_REMOTE_DEBUG: ${ENABLE_REMOTE_DEBUG}
      HOSPITAL_APP_USER_SERVICE_DB_URL: ${USER_SERVICE_DB_URL}
      HOSPITAL_APP_USER_SERVICE_DB_USER: ${USER_SERVICE_DB_USER}
      HOSPITAL_APP_USER_SERVICE_DB_PASS: ${USER_SERVICE_DB_PASS}
      HOSPITAL_APP_USER_SERVICE_DB_DRIVER: ${USER_SERVICE_DB_DRIVER}
      HOSPITAL_APP_USER_SERVICE_DB_DDL_AUTO: ${USER_SERVICE_DB_DDL_AUTO}
      HOSPITAL_APP_USER_SERVICE_DB_DIALECT: ${USER_SERVICE_DB_DIALECT}

      # GRPC Certifications
      HOSPITAL_APP_USER_SERVICE_CRT: ${USER_SERVICE_CRT}
      HOSPITAL_APP_USER_SERVICE_KEY: ${USER_SERVICE_KEY}
      HOSPITAL_APP_USER_SERVICE_CA: ${USER_SERVICE_CA}
      HOSPITAL_APP_USER_SERVICE_CLIENT_AUTH: ${USER_SERVICE_CLIENT_AUTH}

    volumes:
      - m2-repo:/root/.m2

  user-service-db:
    image: postgres:15-alpine3.21
    container_name: hospital-app-user-service-db
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB}
      POSTGRES_USER: ${USER_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_DB_PASS}
    volumes:
      - user-service-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_SERVICE_DB_USER} -d ${USER_SERVICE_DB} -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "5437:5432"

  # =====================
  # Appointment Service
  # =====================
  appointment-service:
    build:
      context: ./
      dockerfile: appointment_service/Dockerfile
    container_name: hospital-app-appointment-service
    depends_on:
      appointment-service-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8082:8080"
      - "5006:5005"
    environment:
      ENABLE_REMOTE_DEBUG: ${ENABLE_REMOTE_DEBUG}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_URL: ${APPOINTMENT_SERVICE_DB_URL}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_USER: ${APPOINTMENT_SERVICE_DB_USER}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_PASS: ${APPOINTMENT_SERVICE_DB_PASS}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_DRIVER: ${APPOINTMENT_SERVICE_DB_DRIVER}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_DDL_AUTO: ${APPOINTMENT_SERVICE_DB_DDL_AUTO}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_DIALECT: ${APPOINTMENT_SERVICE_DB_DIALECT}
      # RabbitMQ SSL
      HOSPITAL_APP_RABBITMQ_HOST: ${HOSPITAL_APP_RABBITMQ_HOST}
      HOSPITAL_APP_RABBITMQ_PORT: ${HOSPITAL_APP_RABBITMQ_PORT}
      HOSPITAL_APP_RABBITMQ_USER: ${HOSPITAL_APP_RABBITMQ_USER}
      HOSPITAL_APP_RABBITMQ_PASS: ${HOSPITAL_APP_RABBITMQ_PASS}
      HOSPITAL_APP_RABBITMQ_SSL_ENABLED: ${HOSPITAL_APP_RABBITMQ_SSL_ENABLED}
      HOSPITAL_APP_RABBITMQ_SSL_ALGO: ${HOSPITAL_APP_RABBITMQ_SSL_ALGO}
      HOSPITAL_APP_RABBITMQ_SSL_VALIDATE: ${HOSPITAL_APP_RABBITMQ_SSL_VALIDATE}
      HOSPITAL_APP_RABBITMQ_KEYSTORE: ${HOSPITAL_APP_RABBITMQ_KEYSTORE}
      HOSPITAL_APP_RABBITMQ_KEYSTORE_PASS: ${HOSPITAL_APP_RABBITMQ_KEYSTORE_PASS}
      HOSPITAL_APP_RABBITMQ_TRUSTSTORE: ${HOSPITAL_APP_RABBITMQ_TRUSTSTORE}
      HOSPITAL_APP_RABBITMQ_TRUSTSTORE_PASS: ${HOSPITAL_APP_RABBITMQ_TRUSTSTORE_PASS}
      HOSPITAL_APP_USER_SERVICE_URL: ${HOSPITAL_APP_USER_SERVICE_URL}
      HOSPITAL_APP_APPOINTMENT_SERVICE_CRT: ${HOSPITAL_APP_APPOINTMENT_SERVICE_CRT}
      HOSPITAL_APP_APPOINTMENT_SERVICE_KEY: ${HOSPITAL_APP_APPOINTMENT_SERVICE_KEY}
      HOSPITAL_APP_APPOINTMENT_SERVICE_CA: ${HOSPITAL_APP_APPOINTMENT_SERVICE_CA}


    volumes:
      - m2-repo:/root/.m2

  appointment-service-db:
    image: postgres:15-alpine3.21
    container_name: hospital-app-appointment-service-db
    environment:
      POSTGRES_DB: ${APPOINTMENT_SERVICE_DB}
      POSTGRES_USER: ${APPOINTMENT_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${APPOINTMENT_SERVICE_DB_PASS}
    volumes:
      - appointment-service-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APPOINTMENT_SERVICE_DB_USER} -d ${APPOINTMENT_SERVICE_DB} -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "5435:5432"

  # =====================
  # Notification Service
  # =====================
  notification-service:
    build:
      context: ./
      dockerfile: notification_service/Dockerfile
    container_name: hospital-app-notification-service
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8083:8080"
      - "5009:5005"
    environment:
      ENABLE_REMOTE_DEBUG: ${ENABLE_REMOTE_DEBUG}
      HOSPITAL_APP_NOTIFICATION_SERVICE_DB_URL: ${NOTIFICATION_SERVICE_DB_URL}
      HOSPITAL_APP_NOTIFICATION_SERVICE_DB_USER: ${NOTIFICATION_SERVICE_DB_USER}
      HOSPITAL_APP_NOTIFICATION_SERVICE_DB_PASS: ${NOTIFICATION_SERVICE_DB_PASS}
      HOSPITAL_APP_NOTIFICATION_SERVICE_DB_DRIVER: ${NOTIFICATION_SERVICE_DB_DRIVER}
      HOSPITAL_APP_NOTIFICATION_SERVICE_DB_DDL_AUTO: ${NOTIFICATION_SERVICE_DB_DDL_AUTO}
      HOSPITAL_APP_NOTIFICATION_SERVICE_DB_DIALECT: ${NOTIFICATION_SERVICE_DB_DIALECT}

      # RabbitMQ SSL
      HOSPITAL_APP_RABBITMQ_HOST: ${HOSPITAL_APP_RABBITMQ_HOST}
      HOSPITAL_APP_RABBITMQ_PORT: ${HOSPITAL_APP_RABBITMQ_PORT}
      HOSPITAL_APP_RABBITMQ_USER: ${HOSPITAL_APP_RABBITMQ_USER}
      HOSPITAL_APP_RABBITMQ_PASS: ${HOSPITAL_APP_RABBITMQ_PASS}
      HOSPITAL_APP_RABBITMQ_SSL_ENABLED: ${HOSPITAL_APP_RABBITMQ_SSL_ENABLED}
      HOSPITAL_APP_RABBITMQ_SSL_ALGO: ${HOSPITAL_APP_RABBITMQ_SSL_ALGO}
      HOSPITAL_APP_RABBITMQ_SSL_VALIDATE: ${HOSPITAL_APP_RABBITMQ_SSL_VALIDATE}
      HOSPITAL_APP_RABBITMQ_KEYSTORE: ${HOSPITAL_APP_RABBITMQ_KEYSTORE}
      HOSPITAL_APP_RABBITMQ_KEYSTORE_PASS: ${HOSPITAL_APP_RABBITMQ_KEYSTORE_PASS}
      HOSPITAL_APP_RABBITMQ_TRUSTSTORE: ${HOSPITAL_APP_RABBITMQ_TRUSTSTORE}
      HOSPITAL_APP_RABBITMQ_TRUSTSTORE_PASS: ${HOSPITAL_APP_RABBITMQ_TRUSTSTORE_PASS}

      # Mail
      HOSPITAL_APP_NOTIFICATION_SERVICE_MAIL_HOST: smtp.gmail.com
      HOSPITAL_APP_NOTIFICATION_SERVICE_MAIL_PORT: 587
      HOSPITAL_APP_NOTIFICATION_SERVICE_MAIL_USER: ${NOTIFICATION_SERVICE_MAIL_USER}
      HOSPITAL_APP_NOTIFICATION_SERVICE_MAIL_PASS: ${NOTIFICATION_SERVICE_MAIL_PASS}
    volumes:
      - m2-repo:/root/.m2

  notification-service-db:
    image: postgres:15-alpine3.21
    container_name: hospital-app-notification-service-db
    environment:
      POSTGRES_DB: ${NOTIFICATION_SERVICE_DB}
      POSTGRES_USER: ${NOTIFICATION_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_SERVICE_DB_PASS}
    volumes:
      - notification-service-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${NOTIFICATION_SERVICE_DB_USER} -d ${NOTIFICATION_SERVICE_DB} -h localhost" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "5438:5432"

  # =====================
  # Appointment History Service
  # =====================
  appointment-history-service:
    build:
      context: ./
      dockerfile: appointment_history_service/Dockerfile
    container_name: hospital-app-appointment-history-service
    depends_on:
      appointment-service-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8084:8080"
      - "5008:5005"
    environment:
      ENABLE_REMOTE_DEBUG: ${ENABLE_REMOTE_DEBUG}
      HOSPITAL_APP_APPOINTMENT_HISTORY_SERVICE_DB_URL: ${APPOINTMENT_HISTORY_SERVICE_DB_URL}
      HOSPITAL_APP_APPOINTMENT_HISTORY_SERVICE_DB_USER: ${APPOINTMENT_HISTORY_SERVICE_DB_USER}
      HOSPITAL_APP_APPOINTMENT_HISTORY_SERVICE_DB_PASS: ${APPOINTMENT_HISTORY_SERVICE_DB_PASS}
      HOSPITAL_APP_APPOINTMENT_HISTORY_SERVICE_DB_DRIVER: ${APPOINTMENT_HISTORY_SERVICE_DB_DRIVER}
      HOSPITAL_APP_APPOINTMENT_HISTORY_SERVICE_DB_DDL_AUTO: ${APPOINTMENT_HISTORY_SERVICE_DB_DDL_AUTO}
      HOSPITAL_APP_APPOINTMENT_HISTORY_SERVICE_DB_DIALECT: ${APPOINTMENT_HISTORY_SERVICE_DB_DIALECT}

      # RabbitMQ SSL config
      HOSPITAL_APP_RABBITMQ_HOST: ${HOSPITAL_APP_RABBITMQ_HOST}
      HOSPITAL_APP_RABBITMQ_PORT: ${HOSPITAL_APP_RABBITMQ_PORT}
      HOSPITAL_APP_RABBITMQ_USER: ${HOSPITAL_APP_RABBITMQ_USER}
      HOSPITAL_APP_RABBITMQ_PASS: ${HOSPITAL_APP_RABBITMQ_PASS}
      HOSPITAL_APP_RABBITMQ_SSL_ENABLED: ${HOSPITAL_APP_RABBITMQ_SSL_ENABLED}
      HOSPITAL_APP_RABBITMQ_SSL_ALGO: ${HOSPITAL_APP_RABBITMQ_SSL_ALGO}
      HOSPITAL_APP_RABBITMQ_SSL_VALIDATE: ${HOSPITAL_APP_RABBITMQ_SSL_VALIDATE}
      HOSPITAL_APP_RABBITMQ_KEYSTORE: ${HOSPITAL_APP_RABBITMQ_KEYSTORE}
      HOSPITAL_APP_RABBITMQ_KEYSTORE_PASS: ${HOSPITAL_APP_RABBITMQ_KEYSTORE_PASS}
      HOSPITAL_APP_RABBITMQ_TRUSTSTORE: ${HOSPITAL_APP_RABBITMQ_TRUSTSTORE}
      HOSPITAL_APP_RABBITMQ_TRUSTSTORE_PASS: ${HOSPITAL_APP_RABBITMQ_TRUSTSTORE_PASS}
    volumes:
      - m2-repo:/root/.m2

  appointment-history-service-db:
    image: postgres:15-alpine3.21
    container_name: hospital-app-appointment-history-service-db
    environment:
      POSTGRES_DB: ${APPOINTMENT_HISTORY_SERVICE_DB}
      POSTGRES_USER: ${APPOINTMENT_HISTORY_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${APPOINTMENT_HISTORY_SERVICE_DB_PASS}
    volumes:
      - appointment--history-service-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${APPOINTMENT_HISTORY_SERVICE_DB_USER} -d ${APPOINTMENT_HISTORY_SERVICE_DB} -h localhost" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "5436:5432"

  # =====================
  # RabbitMQ
  # =====================
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: hospital-app-rabbitmq
    ports:
      - "${RABBITMQ_SSL_PORT}:5671"
      - "${RABBITMQ_MGMT_SSL_PORT}:15671"
    volumes:
      - ./rabbitmq/certs:/etc/rabbitmq/certs:ro
      - ./rabbitmq/conf/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    environment:
      RABBITMQ_DEFAULT_USER: ${HOSPITAL_APP_RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${HOSPITAL_APP_RABBITMQ_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

# =====================
# Volumes
# =====================
volumes:
  m2-repo:
  user-service-postgres-data:
  appointment-service-postgres-data:
  appointment--history-service-postgres-data:
  notification-service-postgres-data:

# =====================
# Networks
# =====================
networks:
  hospital-net:
    driver: bridge
