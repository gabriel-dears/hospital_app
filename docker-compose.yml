services:
  # =====================
  # API Gateway (Kong)
  # =====================
  kong:
    image: kong:3.4
    container_name: hospital-app-kong
    restart: unless-stopped
    depends_on:
      - user-service
      - appointment-service
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: ${KONG_DECLARATIVE_CONFIG}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
    volumes:
      - ./kong/kong.yml:/etc/kong/kong.yml:ro
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"

  # =====================
  # User Service
  # =====================
  user-service:
    build:
      context: ./
      dockerfile: user_service/Dockerfile
    container_name: hospital-app-user-service
    depends_on:
      user-service-db:
        condition: service_healthy
    ports:
      - "8081:8080"
      - "5005:5005"
    environment:
      ENABLE_REMOTE_DEBUG: ${ENABLE_REMOTE_DEBUG}
      HOSPITAL_APP_USER_SERVICE_DB_URL: ${USER_SERVICE_DB_URL}
      HOSPITAL_APP_USER_SERVICE_DB_USER: ${USER_SERVICE_DB_USER}
      HOSPITAL_APP_USER_SERVICE_DB_PASS: ${USER_SERVICE_DB_PASS}
      HOSPITAL_APP_USER_SERVICE_DB_DRIVER: ${USER_SERVICE_DB_DRIVER}
      HOSPITAL_APP_USER_SERVICE_DB_DDL_AUTO: ${USER_SERVICE_DB_DDL_AUTO}
      HOSPITAL_APP_USER_SERVICE_DB_DIALECT: ${USER_SERVICE_DB_DIALECT}

  user-service-db:
    image: postgres:15-alpine3.21
    container_name: hospital-app-user-service-db
    environment:
      POSTGRES_DB: ${USER_SERVICE_DB}
      POSTGRES_USER: ${USER_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_DB_PASS}
    volumes:
      - user-service-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_SERVICE_DB_USER} -d ${USER_SERVICE_DB} -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "5437:5432"

  # =====================
  # Appointment Service
  # =====================
  appointment-service:
    build:
      context: ./
      dockerfile: appointment_service/Dockerfile
    container_name: hospital-app-appointment-service
    depends_on:
      appointment-service-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8082:8080"
      - "5006:5005"
    environment:
      ENABLE_REMOTE_DEBUG: ${ENABLE_REMOTE_DEBUG}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_URL: ${APPOINTMENT_SERVICE_DB_URL}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_USER: ${APPOINTMENT_SERVICE_DB_USER}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_PASS: ${APPOINTMENT_SERVICE_DB_PASS}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_DRIVER: ${APPOINTMENT_SERVICE_DB_DRIVER}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_DDL_AUTO: ${APPOINTMENT_SERVICE_DB_DDL_AUTO}
      HOSPITAL_APP_APPOINTMENT_SERVICE_DB_DIALECT: ${APPOINTMENT_SERVICE_DB_DIALECT}

  appointment-service-db:
    image: postgres:15-alpine3.21
    container_name: hospital-app-appointment-service-db
    environment:
      POSTGRES_DB: ${APPOINTMENT_SERVICE_DB}
      POSTGRES_USER: ${APPOINTMENT_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${APPOINTMENT_SERVICE_DB_PASS}
    volumes:
      - appointment-service-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APPOINTMENT_SERVICE_DB_USER} -d ${APPOINTMENT_SERVICE_DB} -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "5435:5432"

  # =====================
  # Notification Service
  # =====================
  notification-service:
    build:
      context: ./
      dockerfile: notification_service/Dockerfile
    container_name: hospital-app-notification-service
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8083:8080"
      - "5007:5005"

  # =====================
  # RabbitMQ
  # =====================
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: hospital-app-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    ports:
      - "5672:5672"
      - "15672:15672"

# =====================
# Volumes
# =====================
volumes:
  user-service-postgres-data:
  appointment-service-postgres-data:
